tryCatch({ #Adding this in case there is an error in any regression; it prints the error without stopping the loop or crashing R! This makes it easy to debug.
if (bp_outcome == "SBP_meas"){ ##If statement to have loop run on correct PRS according to outcome
prs_vars = sbp_prs_vars
}
if (bp_outcome == "DBP_meas"){
prs_vars = dbp_prs_vars
}
for (pop in c("index_all", "index_afr", "index_eur")){ #Loop subsets to eur/afr population and uses correct PCs for each ancestry
tryCatch({
if (pop == "index_afr"){
dat = merged[index_afr,] #so if the population is afr, we have the afr subset of data
}
if (pop == "index_eur"){
dat = merged[index_eur,] #subset of eur population
}
if (pop == "index_all"){
dat = merged #using entire population ???Jen do we want this, to be able to compare?
}
###DO PCs need to be subsetted or is there common PC variables between ethnicities?
for (prs in c(prs_vars)){ #Loop runs through PRS variables within the correct subset specified above based on outcome
tryCatch({
for (ptsd in c(ptsd_vars)){ #Loop runs through PTSD variables
tryCatch({
for (sign in c("+", "*")){ #Loop runs through main effect/interaction
tryCatch({
if (sign == "+"){ #Define model name for file title (Main Effects model)
model = "ME"
}
if (sign == "*"){ #Define model name for file title (Interaction model)
model = "Int"
}
for (age_choice in c(age_mod)){ #Loop runs through age and age*age (still figuring out how to make good file name for this, currently it is age_1 and age_age)
tryCatch({
#Add loop for interaction c("ptsd + prs", "ptsd*prs")
#Add loop for gender
#Add loop for different BP measurment and remove anthtn_use
#Main effects model first
modelformula = paste(bp_outcome, "~ sex + P1 + P2 + P3 + age*",age_choice, "+", ptsd, sign, prs, sep = "")
assign(paste(model, bp_outcome, pop, "age", age_choice, ptsd, prs,  sep = "_"), lm(as.formula(modelformula), data=dat))
#Add saving output
#save(assign...,file=paste("ME",bp_outcome,"age", pop, age_choice, ptsd, prs,".RData",sep="_")) #Save model outputs as an R object
#lmOut(paste("ptsd_ME",bp_outcome, prs, sep = ""), file=as.character(paste("ptsdlt_res_summary_ME_", bp_outcome, prs, ".csv", sep="")), ndigit=3, writecsv=T)
}, #Trycatch 5 end curly
error=function(e){cat("ERROR :",conditionMessage(e), "\n")})  } #age loop end curly
}, #Trycatch 4 end curly
error=function(e){cat("ERROR :",conditionMessage(e), "\n")})  } #main effect/interaction loop end curly
}, #Trycatch 3 end curly
error=function(e){cat("ERROR :",conditionMessage(e), "\n")}) } #ptsd loop end curly
}, #Trycatch 2 end curly
error=function(e){cat("ERROR :",conditionMessage(e), "\n")})   } #prs loop end curly
}, #Trycatch 1 end curly
error=function(e){cat("ERROR :",conditionMessage(e), "\n")}) } #ancestry loop end curly
}, #Trycatch 1 end curly
error=function(e){cat("ERROR :",conditionMessage(e), "\n")}) #BP outcome end
}
plot(ME_DBP_meas_age_index_afr_1_ptsd_diag_cur_dbp_prs01)
plot(ME_DBP_meas_age_index_afr_1_ptsd_diag_cur_dbp_prs01)
prsfile= "/Users/TinyDragon/github/PolygenicPTSD/data/test.SBP.all.score"
bpprs_pcs <- read.table(prsfile, header=T,stringsAsFactors=F)
bpprs_pcs <- rename(bpprs_pcs, c("X0.01" = "dbp_prs01", "X0.02" = "dbp_prs02", "X0.03" = "sbp_prs03", "X0.04" = "sbp_prs04", "X0.05" = "bp_prs05", "X0.06" = "bp_prs06"))
#We'll note the names of all PRS columns that aren't FID and IID (cols 1 and 2), we're gonna loop over those
#prs_columns <- names(bpprs_pcs)[-c(1:2)]
phenofile <- "/Users/TinyDragon/github/PolygenicPTSD/data/example_bpdata.txt" #File name for phenotype mergeda
pheno <- read.table(phenofile, header=T,stringsAsFactors=F)
pheno <- rename(pheno, c("sbp_meas" = "SBP_meas", "dbp_meas" = "DBP_meas"))
#Mutating to simulate all relevant variables we might need
pheno <- mutate(pheno,
ptsd_diag_lt = sample(c(0,1), replace=TRUE, size=dim(pheno)[1]),
ptsd_sx_lt = sample(c(0:10), replace=TRUE, size=dim(pheno)[1]),
ptsd_diag_cur = sample(c(0,1), replace=TRUE, size=dim(pheno)[1]),
ptsd_sx_cur = sample(c(0:10), replace=TRUE, size=dim(pheno)[1]),
P1 = rnorm(dim(pheno)[1]),
P2 = rnorm(dim(pheno)[1]),
P3 = rnorm(dim(pheno)[1]),
afrP1 = rnorm(dim(pheno)[1]),
afrP2 = rnorm(dim(pheno)[1]),
afrP3 = rnorm(dim(pheno)[1]),
eurP1 = rnorm(dim(pheno)[1]),
eurP2 = rnorm(dim(pheno)[1]),
eurP3 = rnorm(dim(pheno)[1]),
BP = rnorm(dim(pheno)[1]),
sex = sample(c(0,1), replace=TRUE, size=dim(pheno)[1]),
age = runif(dim(pheno)[1],18,50),
educ = sample(c(0, 1, 2, 3), replace = TRUE, size = dim(pheno)[1]),
cohort = sample(c(0, 1), replace = TRUE, size = dim(pheno)[1]),
antihtn_use = sample(c(0,1), replace = TRUE, size = dim(pheno)[1], prob = c(.8, .2)),
antihtn_type = sample(c(0,1, 2, 3, 4, 5, 6), replace = TRUE, size = dim(pheno)[1]),
bp_meth = sample(c(0, 1, 2), replace = TRUE, size = dim(pheno)[1]),
htn_meth = sample(c(0, 2, 3), replace = TRUE, size = dim(pheno)[1]),
bmi = runif(dim(pheno)[1],42,150)/runif(dim(pheno)[1],1.5,1.9), #random weight (kg)/random heigh (meters)
bestpop = sample(c("eur", "afr", "aam"), replace = TRUE, size = dim(pheno)[1]),
htn_selfr = sample(c(0, 1, 2), replace=TRUE, size=dim(pheno)[1])
)
merged <- merge(bpprs_pcs[,1:8], pheno, by=c("FID","IID")) #Just using 3 PRS columns to make it simpler mergedaframe for now
merged = mutate(merged,
htn_aha_old =
ifelse((SBP_meas<140 | DBP_meas<90) & antihtn_use !=1, 1,
ifelse(SBP_meas<120 & DBP_meas<80, 0,
ifelse(SBP_meas>=140 | DBP_meas>=90 | antihtn_use== 1, 2, NA))),
htn_aha_new =
ifelse(SBP_meas<130 & DBP_meas<80 & antihtn_use !=1, 1,
ifelse(SBP_meas<120 & DBP_meas<80, 0,
ifelse(SBP_meas>=130 | DBP_meas>=80 | antihtn_use==1, 2, NA))))
#Visually check to make sure the two new variables htn_aha_old and htn_aha_new were added appropriately
#Also create binary variable in case there are not enough in the pre-hypertensive group
###Below, 0 = non-hypertensive or pre-hypertensive, 1 = hypertensive
merged = mutate(merged,
htn_aha_old_bi =
ifelse((SBP_meas<140 | DBP_meas<90) & antihtn_use != 1, 0,
ifelse(SBP_meas>=140 | DBP_meas>=90 | antihtn_use==1, 1, NA)),
htn_aha_new_bi =
ifelse(SBP_meas<130 & DBP_meas<80 & antihtn_use != 1, 0,
ifelse((SBP_meas>=130 | DBP_meas>=80) | antihtn_use==1, 1, NA)))
###
#Add BP variables adjusted for if antihtn_use = 1
# SBP + 10 and DBP + 5 if antihtn_use = 1
merged = mutate(merged,
SBP_meas_adj =
ifelse(antihtn_use == 1, SBP_meas + 10, NA),
DBP_meas_adj =
ifelse(antihtn_use ==1, DBP_meas + 5, NA))
#Now categorize ancestries
#Ancestry variable is called 'bestpop'.
#European ancestry subjects are labeled as 'eur', Africans are 'afr', African Americans (admixed between European and African) are 'aam'.
#Combine the afr and aam samples together for analyses
#Code 0 = eur, 1 = afr & aam
merged = mutate(merged,
ancestry =
ifelse(bestpop == "eur", 0,
ifelse(bestpop == "afr" | bestpop == "aam", 1, NA)))
#create indices for subset
index_eur = grepl(0, merged$ancestry)
index_afr = grepl(1, merged$ancestry)
##*New loop for multiple dbp_prs
#First create list of PRS variables
sbp_prs_vars <- colnames(merged)[grepl("sbp_prs", colnames(merged))] #confirm that all prs levels have "prs" and no other variables have it
dbp_prs_vars <- colnames(merged)[grepl("dbp_prs", colnames(merged))] #confirm that all prs levels have "prs" and no other variables have it
ptsd_vars <- colnames(merged[grepl("ptsd", colnames(merged))])
htn_prs_vars <- colnames(merged)[grepl("*bp_prs", colnames(merged))]
htn_prs_vars <- colnames(merged)[grepl("^bp_prs", colnames(merged))]
age_mod <- c("1", "age")
for (bp_outcome in c("SBP_meas", "DBP_meas")){ #Loop runs through outcomes. Currently just SBP and DBP but will add HTN when ready.
tryCatch({ #Adding this in case there is an error in any regression; it prints the error without stopping the loop or crashing R! This makes it easy to debug.
if (bp_outcome == "SBP_meas"){ ##If statement to have loop run on correct PRS according to outcome
prs_vars = sbp_prs_vars
}
if (bp_outcome == "DBP_meas"){ #Indicate dbp prs variables if outcome is DBP
prs_vars = dbp_prs_vars
}
for (pop in c("index_all", "index_afr", "index_eur")){ #Loop subsets to eur/afr population and uses correct PCs for each ancestry
tryCatch({
if (pop == "index_afr"){
dat = merged[index_afr,] #so if the population is afr, we have the afr subset of data
}
if (pop == "index_eur"){
dat = merged[index_eur,] #subset of eur population
}
if (pop == "index_all"){
dat = merged #using entire population ???Jen do we want this, to be able to compare?
}
###DO PCs need to be subsetted or is there common PC variables between ethnicities?
for (prs in c(prs_vars)){ #Loop runs through PRS variables within the correct subset specified above based on outcome
tryCatch({
for (ptsd in c(ptsd_vars)){ #Loop runs through PTSD variables
tryCatch({
for (sign in c("+", "*")){ #Loop runs through main effect/interaction
tryCatch({
if (sign == "+"){ #Define model name for file title (Main Effects model)
model = "ME"
}
if (sign == "*"){ #Define model name for file title (Interaction model)
model = "Int"
}
for (age_choice in c(age_mod)){ #Loop runs through age and age*age (still figuring out how to make good file name for this, currently it is age_1 and age_age)
tryCatch({
#Add loop for gender?
#Add loop for different BP measurement and remove anthtn_use
modelformula = paste(bp_outcome, "~ sex + P1 + P2 + P3 + age*",age_choice, "+", ptsd, sign, prs, sep = "")
assign(paste(model, bp_outcome, pop, "age", age_choice, ptsd, prs,  sep = "_"), lm(as.formula(modelformula), data=dat))
#Add saving output
#save(assign...,file=paste("ME",bp_outcome,"age", pop, age_choice, ptsd, prs,".RData",sep="_")) #Save model outputs as an R object
#lmOut(paste("ptsd_ME",bp_outcome, prs, sep = ""), file=as.character(paste("ptsdlt_res_summary_ME_", bp_outcome, prs, ".csv", sep="")), ndigit=3, writecsv=T)
}, #Trycatch 5 end curly
error=function(e){cat("ERROR :",conditionMessage(e), "\n")})  } #age loop end curly
}, #Trycatch 4 end curly
error=function(e){cat("ERROR :",conditionMessage(e), "\n")})  } #main effect/interaction loop end curly
}, #Trycatch 3 end curly
error=function(e){cat("ERROR :",conditionMessage(e), "\n")}) } #ptsd loop end curly
}, #Trycatch 2 end curly
error=function(e){cat("ERROR :",conditionMessage(e), "\n")})   } #prs loop end curly
}, #Trycatch 1 end curly
error=function(e){cat("ERROR :",conditionMessage(e), "\n")}) } #ancestry loop end curly
}, #Trycatch 1 end curly
error=function(e){cat("ERROR :",conditionMessage(e), "\n")}) #BP outcome end
} #end loop
for (bp_outcome in c("SBP_meas", "DBP_meas")){ #Loop runs through outcomes. Currently just SBP and DBP but will add HTN when ready.
tryCatch({ #Adding this in case there is an error in any regression; it prints the error without stopping the loop or crashing R! This makes it easy to debug.
if (bp_outcome == "SBP_meas"){ ##If statement to have loop run on correct PRS according to outcome
prs_vars = sbp_prs_vars
}
if (bp_outcome == "DBP_meas"){ #Indicate dbp prs variables if outcome is DBP
prs_vars = dbp_prs_vars
}
for (pop in c("index_all", "index_afr", "index_eur")){ #Loop subsets to eur/afr population and uses correct PCs for each ancestry
tryCatch({
if (pop == "index_afr"){
dat = merged[index_afr,] #so if the population is afr, we have the afr subset of data
}
if (pop == "index_eur"){
dat = merged[index_eur,] #subset of eur population
}
if (pop == "index_all"){
dat = merged #using entire population ???Jen do we want this, to be able to compare?
}
###DO PCs need to be subsetted or is there common PC variables between ethnicities?
for (prs in c(prs_vars)){ #Loop runs through PRS variables within the correct subset specified above based on outcome
tryCatch({
for (ptsd in c(ptsd_vars)){ #Loop runs through PTSD variables
tryCatch({
for (sign in c("+", "*")){ #Loop runs through main effect/interaction
tryCatch({
if (sign == "+"){ #Define model name for file title (Main Effects model)
model = "ME"
}
if (sign == "*"){ #Define model name for file title (Interaction model)
model = "Int"
}
for (age_choice in c(age_mod)){ #Loop runs through age and age*age (still figuring out how to make good file name for this, currently it is age_1 and age_age)
tryCatch({
#Add loop for gender?
#Add loop for different BP measurement and remove anthtn_use
modelformula = paste(bp_outcome, "~ sex + P1 + P2 + P3 + age*",age_choice, "+", ptsd, sign, prs, sep = "")
assign(paste(model, bp_outcome, pop, "age", age_choice, ptsd, prs,  sep = "_"), lm(as.formula(modelformula), data=dat))
#Add saving output
#save(assign...,file=paste("ME",bp_outcome,"age", pop, age_choice, ptsd, prs,".RData",sep="_")) #Save model outputs as an R object
#lmOut(paste("ptsd_ME",bp_outcome, prs, sep = ""), file=as.character(paste("ptsdlt_res_summary_ME_", bp_outcome, prs, ".csv", sep="")), ndigit=3, writecsv=T)
}, #Trycatch 5 end curly
error=function(e){cat("ERROR :",conditionMessage(e), "\n")})  } #age loop end curly
}, #Trycatch 4 end curly
error=function(e){cat("ERROR :",conditionMessage(e), "\n")})  } #main effect/interaction loop end curly
}, #Trycatch 3 end curly
error=function(e){cat("ERROR :",conditionMessage(e), "\n")}) } #ptsd loop end curly
}, #Trycatch 2 end curly
error=function(e){cat("ERROR :",conditionMessage(e), "\n")})   } #prs loop end curly
}, #Trycatch 1 end curly
error=function(e){cat("ERROR :",conditionMessage(e), "\n")}) } #ancestry loop end curly
}, #Trycatch 1 end curly
error=function(e){cat("ERROR :",conditionMessage(e), "\n")}) #BP outcome end
print(i)
}
i = 1
i = i+1
i = 0
for (bp_outcome in c("SBP_meas", "DBP_meas")){ #Loop runs through outcomes. Currently just SBP and DBP but will add HTN when ready.
tryCatch({ #Adding this in case there is an error in any regression; it prints the error without stopping the loop or crashing R! This makes it easy to debug.
if (bp_outcome == "SBP_meas"){ ##If statement to have loop run on correct PRS according to outcome
prs_vars = sbp_prs_vars
}
if (bp_outcome == "DBP_meas"){ #Indicate dbp prs variables if outcome is DBP
prs_vars = dbp_prs_vars
}
for (pop in c("index_all", "index_afr", "index_eur")){ #Loop subsets to eur/afr population and uses correct PCs for each ancestry
tryCatch({
if (pop == "index_afr"){
dat = merged[index_afr,] #so if the population is afr, we have the afr subset of data
}
if (pop == "index_eur"){
dat = merged[index_eur,] #subset of eur population
}
if (pop == "index_all"){
dat = merged #using entire population ???Jen do we want this, to be able to compare?
}
###DO PCs need to be subsetted or is there common PC variables between ethnicities?
for (prs in c(prs_vars)){ #Loop runs through PRS variables within the correct subset specified above based on outcome
tryCatch({
for (ptsd in c(ptsd_vars)){ #Loop runs through PTSD variables
tryCatch({
for (sign in c("+", "*")){ #Loop runs through main effect/interaction
tryCatch({
if (sign == "+"){ #Define model name for file title (Main Effects model)
model = "ME"
}
if (sign == "*"){ #Define model name for file title (Interaction model)
model = "Int"
}
for (age_choice in c(age_mod)){ #Loop runs through age and age*age (still figuring out how to make good file name for this, currently it is age_1 and age_age)
tryCatch({
#Add loop for gender?
#Add loop for different BP measurement and remove anthtn_use
modelformula = paste(bp_outcome, "~ sex + P1 + P2 + P3 + age*",age_choice, "+", ptsd, sign, prs, sep = "")
assign(paste(model, bp_outcome, pop, "age", age_choice, ptsd, prs,  sep = "_"), lm(as.formula(modelformula), data=dat))
#Add saving output
#save(assign...,file=paste("ME",bp_outcome,"age", pop, age_choice, ptsd, prs,".RData",sep="_")) #Save model outputs as an R object
#lmOut(paste("ptsd_ME",bp_outcome, prs, sep = ""), file=as.character(paste("ptsdlt_res_summary_ME_", bp_outcome, prs, ".csv", sep="")), ndigit=3, writecsv=T)
}, #Trycatch 5 end curly
error=function(e){cat("ERROR :",conditionMessage(e), "\n")})  } #age loop end curly
}, #Trycatch 4 end curly
error=function(e){cat("ERROR :",conditionMessage(e), "\n")})  } #main effect/interaction loop end curly
}, #Trycatch 3 end curly
error=function(e){cat("ERROR :",conditionMessage(e), "\n")}) } #ptsd loop end curly
}, #Trycatch 2 end curly
error=function(e){cat("ERROR :",conditionMessage(e), "\n")})   } #prs loop end curly
}, #Trycatch 1 end curly
error=function(e){cat("ERROR :",conditionMessage(e), "\n")}) } #ancestry loop end curly
}, #Trycatch 1 end curly
error=function(e){cat("ERROR :",conditionMessage(e), "\n")}) #BP outcome end
i = i+1
print(i)
} #end loop
i = 0
for (bp_outcome in c("SBP_meas", "DBP_meas")){ #Loop runs through outcomes. Currently just SBP and DBP but will add HTN when ready.
tryCatch({ #Adding this in case there is an error in any regression; it prints the error without stopping the loop or crashing R! This makes it easy to debug.
if (bp_outcome == "SBP_meas"){ ##If statement to have loop run on correct PRS according to outcome
prs_vars = sbp_prs_vars
}
if (bp_outcome == "DBP_meas"){ #Indicate dbp prs variables if outcome is DBP
prs_vars = dbp_prs_vars
}
for (pop in c("index_all", "index_afr", "index_eur")){ #Loop subsets to eur/afr population and uses correct PCs for each ancestry
tryCatch({
if (pop == "index_afr"){
dat = merged[index_afr,] #so if the population is afr, we have the afr subset of data
}
if (pop == "index_eur"){
dat = merged[index_eur,] #subset of eur population
}
if (pop == "index_all"){
dat = merged #using entire population ???Jen do we want this, to be able to compare?
}
###DO PCs need to be subsetted or is there common PC variables between ethnicities?
for (prs in c(prs_vars)){ #Loop runs through PRS variables within the correct subset specified above based on outcome
tryCatch({
for (ptsd in c(ptsd_vars)){ #Loop runs through PTSD variables
tryCatch({
for (sign in c("+", "*")){ #Loop runs through main effect/interaction
tryCatch({
if (sign == "+"){ #Define model name for file title (Main Effects model)
model = "ME"
}
if (sign == "*"){ #Define model name for file title (Interaction model)
model = "Int"
}
for (age_choice in c(age_mod)){ #Loop runs through age and age*age (still figuring out how to make good file name for this, currently it is age_1 and age_age)
tryCatch({
#Add loop for gender?
#Add loop for different BP measurement and remove anthtn_use
modelformula = paste(bp_outcome, "~ sex + P1 + P2 + P3 + age*",age_choice, "+", ptsd, sign, prs, sep = "")
assign(paste(model, bp_outcome, pop, "age", age_choice, ptsd, prs,  sep = "_"), lm(as.formula(modelformula), data=dat))
#Add saving output
#save(assign...,file=paste("ME",bp_outcome,"age", pop, age_choice, ptsd, prs,".RData",sep="_")) #Save model outputs as an R object
#lmOut(paste("ptsd_ME",bp_outcome, prs, sep = ""), file=as.character(paste("ptsdlt_res_summary_ME_", bp_outcome, prs, ".csv", sep="")), ndigit=3, writecsv=T)
i = i+1
print(i)
}, #Trycatch 5 end curly
error=function(e){cat("ERROR :",conditionMessage(e), "\n")})  } #age loop end curly
}, #Trycatch 4 end curly
error=function(e){cat("ERROR :",conditionMessage(e), "\n")})  } #main effect/interaction loop end curly
}, #Trycatch 3 end curly
error=function(e){cat("ERROR :",conditionMessage(e), "\n")}) } #ptsd loop end curly
}, #Trycatch 2 end curly
error=function(e){cat("ERROR :",conditionMessage(e), "\n")})   } #prs loop end curly
}, #Trycatch 1 end curly
error=function(e){cat("ERROR :",conditionMessage(e), "\n")}) } #ancestry loop end curly
}, #Trycatch 1 end curly
error=function(e){cat("ERROR :",conditionMessage(e), "\n")}) #BP outcome end
} #end loop
prsfile= "/Users/TinyDragon/github/PolygenicPTSD/data/test.SBP.all.score"
bpprs_pcs <- read.table(prsfile, header=T,stringsAsFactors=F)
bpprs_pcs <- rename(bpprs_pcs, c("X0.01" = "dbp_prs01", "X0.02" = "dbp_prs02", "X0.03" = "sbp_prs03", "X0.04" = "sbp_prs04", "X0.05" = "bp_prs05", "X0.06" = "bp_prs06"))
#We'll note the names of all PRS columns that aren't FID and IID (cols 1 and 2), we're gonna loop over those
#prs_columns <- names(bpprs_pcs)[-c(1:2)]
phenofile <- "/Users/TinyDragon/github/PolygenicPTSD/data/example_bpdata.txt" #File name for phenotype mergeda
pheno <- read.table(phenofile, header=T,stringsAsFactors=F)
pheno <- rename(pheno, c("sbp_meas" = "SBP_meas", "dbp_meas" = "DBP_meas"))
#Mutating to simulate all relevant variables we might need
pheno <- mutate(pheno,
ptsd_diag_lt = sample(c(0,1), replace=TRUE, size=dim(pheno)[1]),
ptsd_sx_lt = sample(c(0:10), replace=TRUE, size=dim(pheno)[1]),
ptsd_diag_cur = sample(c(0,1), replace=TRUE, size=dim(pheno)[1]),
ptsd_sx_cur = sample(c(0:10), replace=TRUE, size=dim(pheno)[1]),
P1 = rnorm(dim(pheno)[1]),
P2 = rnorm(dim(pheno)[1]),
P3 = rnorm(dim(pheno)[1]),
afrP1 = rnorm(dim(pheno)[1]),
afrP2 = rnorm(dim(pheno)[1]),
afrP3 = rnorm(dim(pheno)[1]),
eurP1 = rnorm(dim(pheno)[1]),
eurP2 = rnorm(dim(pheno)[1]),
eurP3 = rnorm(dim(pheno)[1]),
BP = rnorm(dim(pheno)[1]),
sex = sample(c(0,1), replace=TRUE, size=dim(pheno)[1]),
age = runif(dim(pheno)[1],18,50),
educ = sample(c(0, 1, 2, 3), replace = TRUE, size = dim(pheno)[1]),
cohort = sample(c(0, 1), replace = TRUE, size = dim(pheno)[1]),
antihtn_use = sample(c(0,1), replace = TRUE, size = dim(pheno)[1], prob = c(.8, .2)),
antihtn_type = sample(c(0,1, 2, 3, 4, 5, 6), replace = TRUE, size = dim(pheno)[1]),
bp_meth = sample(c(0, 1, 2), replace = TRUE, size = dim(pheno)[1]),
htn_meth = sample(c(0, 2, 3), replace = TRUE, size = dim(pheno)[1]),
bmi = runif(dim(pheno)[1],42,150)/runif(dim(pheno)[1],1.5,1.9), #random weight (kg)/random heigh (meters)
bestpop = sample(c("eur", "afr", "aam"), replace = TRUE, size = dim(pheno)[1]),
htn_selfr = sample(c(0, 1, 2), replace=TRUE, size=dim(pheno)[1])
)
merged <- merge(bpprs_pcs[,1:8], pheno, by=c("FID","IID")) #Just using 3 PRS columns to make it simpler mergedaframe for now
merged = mutate(merged,
htn_aha_old =
ifelse((SBP_meas<140 | DBP_meas<90) & antihtn_use !=1, 1,
ifelse(SBP_meas<120 & DBP_meas<80, 0,
ifelse(SBP_meas>=140 | DBP_meas>=90 | antihtn_use== 1, 2, NA))),
htn_aha_new =
ifelse(SBP_meas<130 & DBP_meas<80 & antihtn_use !=1, 1,
ifelse(SBP_meas<120 & DBP_meas<80, 0,
ifelse(SBP_meas>=130 | DBP_meas>=80 | antihtn_use==1, 2, NA))))
#Visually check to make sure the two new variables htn_aha_old and htn_aha_new were added appropriately
#Also create binary variable in case there are not enough in the pre-hypertensive group
###Below, 0 = non-hypertensive or pre-hypertensive, 1 = hypertensive
merged = mutate(merged,
htn_aha_old_bi =
ifelse((SBP_meas<140 | DBP_meas<90) & antihtn_use != 1, 0,
ifelse(SBP_meas>=140 | DBP_meas>=90 | antihtn_use==1, 1, NA)),
htn_aha_new_bi =
ifelse(SBP_meas<130 & DBP_meas<80 & antihtn_use != 1, 0,
ifelse((SBP_meas>=130 | DBP_meas>=80) | antihtn_use==1, 1, NA)))
###
#Add BP variables adjusted for if antihtn_use = 1
# SBP + 10 and DBP + 5 if antihtn_use = 1
merged = mutate(merged,
SBP_meas_adj =
ifelse(antihtn_use == 1, SBP_meas + 10, NA),
DBP_meas_adj =
ifelse(antihtn_use ==1, DBP_meas + 5, NA))
#Now categorize ancestries
#Ancestry variable is called 'bestpop'.
#European ancestry subjects are labeled as 'eur', Africans are 'afr', African Americans (admixed between European and African) are 'aam'.
#Combine the afr and aam samples together for analyses
#Code 0 = eur, 1 = afr & aam
merged = mutate(merged,
ancestry =
ifelse(bestpop == "eur", 0,
ifelse(bestpop == "afr" | bestpop == "aam", 1, NA)))
#create indices for subset
index_eur = grepl(0, merged$ancestry)
index_afr = grepl(1, merged$ancestry)
##*New loop for multiple dbp_prs
#First create list of PRS variables
sbp_prs_vars <- colnames(merged)[grepl("sbp_prs", colnames(merged))] #selecting column names for sbp PRS
dbp_prs_vars <- colnames(merged)[grepl("dbp_prs", colnames(merged))] #selecting column names for dbp PRS
htn_prs_vars <- colnames(merged)[grepl("^bp_prs", colnames(merged))]
ptsd_vars <- colnames(merged[grepl("ptsd", colnames(merged))]) #selecting the four ptsd variable names
age_mod <- c("1", "age")
i = 0
sbp_prs_vars <- colnames(merged)[grepl("sbp_prs", colnames(merged))] #selecting column names for sbp PRS
dbp_prs_vars <- colnames(merged)[grepl("dbp_prs", colnames(merged))] #selecting column names for dbp PRS
htn_prs_vars <- colnames(merged)[grepl("^bp_prs", colnames(merged))]
ptsd_vars <- colnames(merged[grepl("ptsd", colnames(merged))]) #selecting the four ptsd variable names
age_mod <- c("1", "age")
i = 0
for (bp_outcome in c("SBP_meas", "DBP_meas")){ #Loop runs through outcomes. Currently just SBP and DBP but will add HTN when ready.
tryCatch({ #Adding this in case there is an error in any regression; it prints the error without stopping the loop or crashing R! This makes it easy to debug.
if (bp_outcome == "SBP_meas"){ ##If statement to have loop run on correct PRS according to outcome
prs_vars = sbp_prs_vars
}
if (bp_outcome == "DBP_meas"){ #Indicate dbp prs variables if outcome is DBP
prs_vars = dbp_prs_vars
}
for (pop in c("index_afr", "index_eur")){ #Loop subsets to eur/afr population and uses correct PCs for each ancestry
tryCatch({
if (pop == "index_afr"){
dat = merged[index_afr,] #so if the population is afr, we have the afr subset of data
}
if (pop == "index_eur"){
dat = merged[index_eur,] #subset of eur population
}
###DO PCs need to be subsetted or is there common PC variables between ethnicities?
for (prs in c(prs_vars)){ #Loop runs through PRS variables within the correct subset specified above based on outcome
tryCatch({
for (ptsd in c(ptsd_vars)){ #Loop runs through PTSD variables
tryCatch({
for (sign in c("+", "*")){ #Loop runs through main effect/interaction
tryCatch({
if (sign == "+"){ #Define model name for file title (Main Effects model)
model = "ME"
}
if (sign == "*"){ #Define model name for file title (Interaction model)
model = "Int"
}
for (age_choice in c(age_mod)){ #Loop runs through age and age*age (still figuring out how to make good file name for this, currently it is age_1 and age_age)
tryCatch({
#Add loop for gender?
#hypertension and adjustment
#Add loop for different BP measurement and remove anthtn_use
modelformula = paste(bp_outcome, "~ sex + P1 + P2 + P3 + age*",age_choice, "+", ptsd, sign, prs, sep = "")
assign(paste(model, bp_outcome, pop, "age", age_choice, ptsd, prs,  sep = "_"), lm(as.formula(modelformula), data=dat))
#Add saving output
#save(assign...,file=paste("ME",bp_outcome,"age", pop, age_choice, ptsd, prs,".RData",sep="_")) #Save model outputs as an R object
#lmOut(paste("ptsd_ME",bp_outcome, prs, sep = ""), file=as.character(paste("ptsdlt_res_summary_ME_", bp_outcome, prs, ".csv", sep="")), ndigit=3, writecsv=T)
i = i+1
print(i)
}, #Trycatch 5 end curly
error=function(e){cat("ERROR :",conditionMessage(e), "\n")})  } #age loop end curly
}, #Trycatch 4 end curly
error=function(e){cat("ERROR :",conditionMessage(e), "\n")})  } #main effect/interaction loop end curly
}, #Trycatch 3 end curly
error=function(e){cat("ERROR :",conditionMessage(e), "\n")}) } #ptsd loop end curly
}, #Trycatch 2 end curly
error=function(e){cat("ERROR :",conditionMessage(e), "\n")})   } #prs loop end curly
}, #Trycatch 1 end curly
error=function(e){cat("ERROR :",conditionMessage(e), "\n")}) } #ancestry loop end curly
}, #Trycatch 1 end curly
error=function(e){cat("ERROR :",conditionMessage(e), "\n")}) #BP outcome end
} #end loop
summary(ME_DBP_meas_index_afr_age_1_ptsd_diag_cur_dbp_prs01)
plot(ME_DBP_meas_index_afr_age_1_ptsd_diag_cur_dbp_prs01)
